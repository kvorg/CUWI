#!/usr/bin/env perl
use lib qw(/home/jona/Projects-ijs/CQP/lib);

# TODO:
# MOVE TO QUERY (with Search as additional option)
# result forms to readable: tabulated of the Z form from Query
# add to search form:
#  keep last search
#  select corpus->reload
#  populate form with available attributes using CWB::CL
# limit results (diff Search/Query)
# config handler
# corpus setup
# peek at CWB::CQP

use Mojolicious::Lite;
use CWB::Web::Search;
#use CWB::Web::Query;
use CWB::CL;

if ( $ENV{CORPUS_REGISTRY} ) {
    $CWB::CL::Registry = $ENV{CORPUS_REGISTRY} ;
} else {
    my @REG = qw( /usr/local/share/cwb/registry /usr/local/cwb/registry /home/jona/Projects-ijs/CQP/DemoCorpus/registry/ );
    $CWB::CL::Registry = join (':', grep { ($_ and -r $_) ? $_ : undef } @REG);
}
warn "Registry at $CWB::CL::Registry.\n";

get '/' => 'index';
get 'style.css' => 'style';

get '/search' => sub {
  my $self = shift;
  my $search = new CWB::Web::Search 'DICKENS';
  die "Error accessing corpus.\n" unless ref $search;

  $self->app->log->info("Query was: " . $self->param('query'));
  warn $self->helper(dumper=> $self->stash); #calls Data::Dumper

  # window and context size are specified in CQP syntax
  $search->window("2 s");        # search window
  $search->context("s");         # match context returned as HTML
  #$search->data("url", "date"); # values of s-attributes are returned
  $search->ignore_case('auto');  # search defaults - add options
  $search->ignore_diacritics('auto');
  #$search->cull('after');       # remove duplicate documents (context)??
  $search->highlight('<sep class="hit">'); # HTML highlighting tag

  $self->render( template=>'search',
	       search=>$search,  # stash them!
	       query=>$self->param('query') );
};

app->start;
__DATA__

@@ index.html.ep
% layout 'main', title=>'Form';
<%= include 'form' %>

@@ form.html.ep
  <form action="/search" method="GET">
    <input name="query" type="text" size="60"></input>
    <input type="submit" value="CQP search">
  </form>

@@ search.html.ep
% layout 'main', title=>"for $query" ;
<%= include 'form' %>
% my $nr_matches = $search->query($query);
  <div class="report">
   <p><b><%= $nr_matches %></b> matches found for <sep class="querytext"><%= $query %></sep>.</p>
  </div>
% if ($nr_matches) {
  <div class="matches">
%  for (my $i = 0; $i < $nr_matches; $i++) {
%   my $nr = $i + 1;               # match number
%   my $m = $search->match($i);    # returns result struct without 'context'
    <p><sep class="no">[<%= $nr %>]</sep> <sep class="sd"><%= $m->{'cpos'} %> <%= $m->{'quality'} %></sep>
%#  summary of match (HTML encoded)
    <sep class="match"><%== $m->{'summary'} %></sep>
%#  $m->{'data'}->{'url'}  # requested data values
%#  $m->{'data'}->{'date'},
%#   if ($want_context) {
%#     $m = $search->match($i, 'context');
%## match with context (HTML encoded)
%#    <%== $m->{'context'} %>
%#%   }
    </p>
% }
  </div>
%}


@@ layouts/main.html.ep
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>CQP Search <%= $title ? " $title" : '' =%></title>
  <link href="style.css" rel="stylesheet" type="text/css">
 </head>
 <body>
<%== content %> </body>
</html>

@@ style.css.ep
sep.querytext { font-family: monospace; font-size: 110%; font-weight: bold; }
sep.hit { color: red; font-weight: bold; }
sep.no { font-weight: bold; }
sep.sd { font-family: sans-serif; font-size: 60%; }
