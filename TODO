 -*- outline -*-

* CWB::Model BUGS:

** Paging: displays 1 match more than pagesize
** Escapes for ?, handling for single "
** Check query mangling in detail
** Bail out gracefully on faulty corpora:
   - no data files
   - skip non-existing peers (log error)
   - skip non-existing virtaul corpora members (log error)
** Bail-out gracefully with maxhits:
    use result for warning passing
    announce in red
    make a reduce to maxhits
** In paging with Result objects, the end page calculation is wrong
** Default overrides new for ingorecase
** Bug in combined query syntax: a* [word="t.*"], add test!
** enable quoting of CQP escapes for "[rule]" and '[rule]'
   - change CQP heurisitcs
** Better tests/fails for failing/missing registry specifications
** Clean up newlines at the end of description
** Handle non-compatible info files
   (by parsing them as descriptions)
** Cleanup CQP query link situation with advanced query form options

* CWB::Model

** Structure handling in Query:
    structure searches
    structure-based tree view (treebanks)
** Multicorpora
    - extract virtual query magic into CWB::Model::Query::Virtual
    spook:
    - fix paging calculation,  should be optional, wrapped up in a function
** spook: sub-searches (based on existing search): subquery
   aka Support for chained query support -> store previous queries in link/params
** spook: any needed support for form-based alignement and structural queries
** Add sorting to wordlists (js?)
** Implement max_size and max_querytime properly
** Fix all file work to use IO::File and File::Spec
** Possibly keep wordlists with paging and progressive building
** Add corpus positions dump as an export option
** Improve test coverage
** Colocation support (usin cwb-corpus-scan ?)
** Info files: translateable names/titles
** Add a handle for literal matching (no regexps) with %l
** Test cwb beta release compatibiliy
** Sorting with multiple sort keys
** Wordlist and sorting/prunning using CQP features better
** Implement cached queries:
   - CWB::Model::Corpus keeps a pool of ageing Query objects, matched on query
   - queries are reused with different show options, paging etc.
   - possibly used to support chained queries
** Support for list-oriented queries and macros, i.e. 
    /codist["whose", pos];
    /codist[lemma, "go", word];
** Native CQP and cwb-corpus-scan interfaces with non-blocking queries using
    Mojo::IOLoop->timer(0, sub { poll query or render-cb ; reset timer; }
    or suitable newer solutions
    The query should have a flag when still running and refuse new requests
    from the query cache API

* Web interface BUGS

** broken view display in detailed view
** missing "not" for structural constraint
** _token split bug with 22/24
   http://localhost:3000/cuwi/gfida/search?query=tajkun&search=lemma&within=s&in-struct=text_title&struct-query=Demokracija&contextsize=7&display=kwic&listing=all&size=50&startfrom=1&sort_a=none&sort_a_att=word&sort_a_order=ascending&sort_a_direction=natural
** wordlist -> ignoremeta in links disables ignorecase
** wordlist: quote metacharacters in string links: check/test
** classes: sanitize with the virtual corpus before sending (done?)
** fix controller params / %params ambiguity in controller
   (probably unify names, fix values with redirect and pass to model
   through a filter - setting params is proven to work ok
   use flash to pass a message about fixing params)
** fix wierd behavior with last page on \. search on imp-goo
** move export modules in and eval encapsualtion and handle exceptions
** make export modules work asynchroniously
** disable context links for biggest display mode (sentence or paragraph)
** make label and checkbox unbreakable in attributes
   (css? span? drop &nbsp;)
** possibly closures for exception handling are buggy
   - should rethrow the exception and catch it in webapp?
   - or just check for return value?
   - make a nice exception page or part of page for fatals
   - find a way to test all of this

* Web interface

** change wordlist exporting to divide matches into multiple fields
** spook: Templates for query result exports
   missing: oocalc, tab-delmited, corpus position dump, tei/xml,
   latex, yaml
** spook: structural attribute constraint search:
   add interface for multiple constraints
** spook: password protected groups
   better implementation
** spook: sub-searches (based on existing search)
** short ID for structural attribute (auth year?) in [result]
   sane default + changeable from info file or conf
** spook: home page info:
   navodila za uporabo v slovenščini s čimveč primeri različnih tipov
   iskanj - use a link
** imp: Use click-to pop-up for help
   (via js binding + help at bottom always)
** imp: sortable frequency lists (via js?)
** wordlists: click on frequency number to get conjunction query
** additional grid query compositing interface
   as per http://nl.ijs.si/jos/cqp/uni and http://nl2.ijs.si/fpj.html
** When more than 7 attributes are present, switch display to 4 drop-down lists 
   (possibly list selection performs a direct query redirect)
** Log cleanup:
   Production mode logging of queries and performance -> info
   Development: info->debug
** Add sample implementation with redirect to a fixed sample seeed [till May 8]
   [check status and add tests]
** Sorting, with options:
   - with 2 or three sort keys
** Split display modes into search, detail, frequencies, collocations
** Add generate config helper to cuwi command line, and help
** Cleanup of templates: separation with includes
** I18n
** Concordance support
   - probaly by supporting cwb-scan-corpus and disk-related
     long-polled results, see CWB::Model TODO
** More sorting and grouping for wordlists:
   - by frequency, by object found (using column headings for sort)
   - 2 or 3 sort keys = grouping

* Tests

** Finish CWB::Model tests
*** virtual config errors
*** t/01_registry.t-23-# test for non-existing registry
*** 01 tests for multiple registry directories
*** 01 tests for ->registry accessor
*** 01 registry update and reloading
*** 01 broken registry files, missing info files
*** 01 exception handling
*** 01 introduce exceptions in tests
*** 02 infofile: peer corpora/alignement
*** 03 query: faulty options
*** 05 result: display tests (show, all/sample)
*** 05 query/result encoding roundtrip (in queries and all display modes)
*** 05 result: one too many hit in result pages
*** 05 result: check number of hits against 2 or more pages for 0-based page offsets
*** 06 result: alignement, alignement encoding

** CUWI Webapp tests
*** config file parsing
*** config file errors: consistency
*** perl as config format
*** export module detection (use_ok vs. loader?)
*** export options working
*** all layouts (to enable template hacking)

** Online tests for HTML and CSS syntax checking

* Links: 

** http://corpus.leeds.ac.uk/paraquery.html
** http://www.comp.leeds.ac.uk/ssharoff/
** http://the.sketchengine.co.uk/
** corpus.leeds.ac.uk./natasha mana serge cqp search
** SPOOK concord: http://nl.ijs.si/et/project/SPOOK/konkor/ 
** Para corpora:
   - http://nl2.ijs.si/index-bi.html
           where ALIGNED name is the aligned corpus, aligned by <seg>
   - http://nl2.ijs.si/dsi.html

* Release-critical

** cuwi growing and cleanup
** spook stuff, multicorpora
** default info file processing
** decent test coverage
** logo
** max_size, max_query_time in config
** I18n
** colocations MI3 LL
   http://nlp.stanford.edu/fsnlp/promo/colloc.pdf
   http://nlp.stanford.edu/fsnlp/
** missing tabular download formats
** documentation
   especially:
*** config
*** registries and info files
*** CWB::Model API

* Future:
** corpus groups
   - main list lists groups and non-grouped corpora
   - groups need special description files -> default corpus, links to members
   - grouped corpora have corpus selectors for corpora within group
   - alternatively, use SISTER_CORPORA in info files for the drop-down menu
** user registration, storable queries, diff between storable queries etc.
 From the list:
Message:
From our experience working interactively in CQP, it's even more useful to
be able to run subqueries, i.e. filter query results either by collocates
(tokens with a certain property within a specified range, e.g. a finite
verb within 3 words) or by another CQP query.  This could easily be
implemented using "set keyword" and subqueries in CQP, but the results
would have to be stored as saved queries (because they can't easily be
reproduced when they're dropped from the cache).
** treebank view
** admin section:
*** corpus building
*** ad-hoc corpora
*** corpus building toolchain: ToTaLe plugin etc.
*** wordnet API, slownet plugin
