#!/usr/bin/env perl
use lib qw(/home/jona/Projects-ijs/CQP/lib);

use CWB::Web::Query;
use CWB::CL;
if ( $ENV{CORPUS_REGISTRY} ) {
    $CWB::CL::Registry = $ENV{CORPUS_REGISTRY} ;
} else {
    my @REG = qw( /usr/local/share/cwb/registry /usr/local/cwb/registry /home/jona/Projects-ijs/CQP/DemoCorpus/registry/ );
    $CWB::CL::Registry = join (':', grep { ($_ and -r $_) ? $_ : undef } @REG);
}
warn "Registry at $CWB::CL::Registry.\n";

my $search = new CWB::Web::Query 'DICKENS';
die "Error accessing corpus.\n" unless ref $search;
# window and context size are specified in CQP syntax
$search->context("s");  # match context returned as HTML
$search->data("s_len", "chapter_title", "novel_title");  # wanted s-attributes
$search->ignore_case('auto');       # case-insensitive search
$search->ignore_diacritics('auto'); # search ignores diacritics
#$search->cull('after');        # remove duplicate documents (context)
$search->highlight('<sep class="hit">'); # HTML highlighting tag

my $nr_matches = $search->query("interesting");
print "$nr_matches results.\n";

exit unless $nr_matches;

my $want_context=1;

for ($i = 0; $i < $nr_matches; $i++) {
  $nr = $i + 1;               # match number
  $m = $search->match($i);    # returns result struct without 'context'
  my $result = join(', ', 
		 $m->{'cpos'},           # corpus position of match centre
		 $m->{'quality'},        # relevance of this match
		 $m->{'summary'},        # summary of match (HTML encoded)
		 '{' . $m->{'data'}->{'novel_title'} . ': ' .$m->{'data'}->{'chapter_title'} . '}',  # requested data values
		 $m->{'data'}->{'s_len'},  # requested data values
		 #$m->{'data'}->{'date'},
		);
  $result .= "\n";
  if ($want_context) {
    $m = $search->match($i, 'context');
    $result .= "[[[" . $m->{'context'} . "]]]\n";   # match with context (HTML encoded)
  }
  print "[$i] ", $result;

}

undef $search;

