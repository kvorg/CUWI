#!/usr/bin/env perl
use lib qw(/home/jona/Projects-ijs/CQP/lib ./mylib);
use lib qw( /home/jona/usr/cwb/CQP/lib /home/jona/usr/cwb/CQP/mylib /home/jona/usr/cwb/share/perl5 /home/jona/usr/cwb/lib64/perl5 /home/jona/usr/cwb/lib64/perl5/auto );

use Mojolicious::Lite;
#use CWB::Web::Search;
use IO::File;
use IO::Dir;
use CWB::Model;
use Encode 'decode';


plugin 'charset' => {charset => 'utf-8'};
plugin 'tag_helpers_extra';
plugin 'pod_renderer';

app->secret('re9phoothieX4dah4chi');
my $maxsize = 5000;

my $sanitize;  # param sanitization callback
my $tabulator; # multi attribute tabulator callback

# config
# possibly use the config helper?
my $config = plugin json_config => {
        stash_key => 'config',
        default   => { registry => '/usr/local/share/cwb/registry:/usr/local/cwb/registry' },
    };
#stuff me in a helper?
my $model = CWB::Model->new(
			    ( $config->{registry} ? 
			     (registry => $config->{registry}) : () )
			   )
  or die "Could not instantiate CWB::Model, aboring\n";
$model->install_exception_handler(sub { app->log->error(@_); } );
app->defaults(model => $model);

app->log->info('CWB Model instantiated with corpora: ' .
	       join(', ', $model->list) );
$config->{root} =~ s{^(.*)/$}{$1};
app->log->info("App web root: '$config->{root}'.");

app->log->info("Registry at '" . $model->registry . "'.");
app->log->info("Ready to serve requests.");

# routes and controllers
under ( $config->{root} );

get "/" => sub { $sanitize->(shift); } =>'index';

get "/style.css" => 'style';

get "/:corpus" => sub {
  my $self = shift;
  my $corpus = ${$self->stash('model')->corpora}{$self->param('corpus')};

  $self->app->log->info("Redirecting to registry, corpus init aborted.")
    and $self->redirect_to('index')
      and return
	unless $self->param('corpus')
	  and $corpus and $corpus->isa('CWB::Model::Corpus');

  $self->stash(corpus => $corpus );
} => 'corpus';

get "/:corpus/search" => sub {
  my $self = shift;

  $self->app->log->info("Received query: " . $self->param('query'));
  $self->app->log->info('CWB::Model::Corpus init on "' . $self->param('corpus') . '".');
  my $corpus = ${$self->stash->{model}->corpora}{$self->param('corpus')};

  $self->app->log->info("Redirecting to registry, corpus init aborted.")
    and $self->redirect_to('index')
      and return
	unless $self->param('query')
	  and $corpus and $corpus->isa('CWB::Model::Corpus');

  $sanitize->($self); # sanitize parameters, set defaults
#  my %params = %{$self->req->params->to_hash};
  my %params;
  $params{query} = $self->param('query');
  $params{search} = $self->param('search');
  $params{ignorecase} = $self->param('ignorecase');
  $params{ignorediacritics} = $self->param('ignorediacritics');
  $params{show} = ref $self->param('show') eq 'ARRAY' ?
    $self->param('show') : [ $self->param('show') ] ;
  $params{context} = $self->param('contextsize') . ' words';
  $params{display} = $self->param('display');
  $params{startfrom} = $self->param('startfrom');
  $params{reduce} = 1 if $self->param('listing') eq 'sample';
  $params{pagesize} = $self->param('size');
  warn "Calling query with " . $self->dumper(\%params);

  my $result = $corpus->query(%params);

  if ( $result and $result->isa('CWB::Model::Result') ) {
    $self->app->log->info(
			  'Query processed in '.
			  sprintf('%0.3f', $result->time) . ' s ' .
			  'with ' . $result->hitno . ' hits.' );
  } else {
    $self->app->log->error("Query failed."); #handle fail
  }

  $self->param('startfrom', 0)
    unless $self->param('startfrom') < $result->hitno;

  $self->render( template=>'search',
		 result=>$result,
		 corpus=>$corpus,
		 tc=>$tabulator,
	       );
} => 'search';

# use this to redirect
$sanitize = sub {
  my $self = shift;

  $self->param('contextsize', 10)
    unless $self->param('contextsize')
      and '' . $self->param('contextsize') =~ m{[0-9]+};
  $self->param('size', 50)
    unless $self->param('size')
      and '' . $self->param('size') =~ m{[0-9]+}
      and $self->param('size') <= $maxsize;
  $self->param('startfrom', 1)
    unless $self->param('startfrom')
      and '' . $self->param('startfrom') =~ m{[0-9]+}
      and $self->param('startfrom') <= $maxsize;
};

$tabulator = sub {
  my $string = shift;
  return $string unless $string =~ m{/};
  my $o = '<span class="part">'; my $c = '</span>';
  my @tokens = split(/\s+/, $string);
  @tokens = map {
    my @parts = split('/', $_);
    '<span class="token">' . $o . join("$c$o", @parts) . $c . '</span>';
  } @tokens;
  return join(' ', @tokens);
};

app->start;


__DATA__

@@ index.html.ep
% layout 'main', title=>'Form';

% if ($config->{blurb}) {
  <p><%== $config->{blurb} %></p>
% }

<div class="corpora">
 <p>Available corpora:</p>
 <ul>
% my $corpora = $model->corpora;
% foreach my $corpusname ( sort keys %{$corpora} ) {
   <li><a href="/<%= $config->{root} . '/' . $corpusname %>"><b><%= $corpora->{$corpusname}->NAME %></b>: <%= $corpora->{$corpusname}->title %></a></li>
% }
 </ul>


@@ corpus.html.ep
% layout 'main', title=>'Form';
%= include 'form', query=>undef, contextsize=>10, size=>50, startfrom=>0, listing=>'all'

  <div class="description">
    <%== $corpus->describe('en') %>
%# add attribute descriptions here
  </div>


@@ form.html.ep
  <div class="form">
  <%= form_for "/$config->{root}/" . $corpus->name . "/search", ( method => "get") => begin %>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Query</em>The search query can contain simple words with optional ? and * place-holders. Your query will be converted into a CQP langauge query, using the 'Search' attributes bellow. The search result page will display how the simple search is transformed into a CQP query. If CQP syntax (triggered by any use of quoting in the search query) is detected, no conversion is applied and the 'Search' attributes are ignored. </span>
  Query</a>: <%= text_field 'query', size=>60 %>
    <br>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Search attributes</em>Select the attribute the search is to be performed on. If you need different attributes in the same query, you need to use the CQP syntax. When using CQP syntax, the selected Search attribute is ignored. The attributes are extracted from the corpus description in the corpus registry (so possibly some are less useful then others).</span>
    Search</a>:
% my $checked = 0;
% foreach my $att (@{$corpus->attributes}) {
  % my $ttip = $corpus->tooltip(attribute => $att, 'en');
  % if ($ttip) {
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em><%= $att %></em><%= $ttip %></span>
  % }
     <%= radio_button_x 'search' => $att, $checked++ ? () : (checked => 'checked') => begin %><%= $att %><% end %>
  % if ($ttip) {
   </a>
  % }
% }
    <span>&nbsp; &nbsp;</span>
    Ignore
      <%= check_box 'ignorecase'       => 1 %> case
      <%= check_box 'ignorediacritics' => 1 %> diacritics
    <br>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Show attributes</em>Select which attributes are to be displayed with your search results. If multiple attributes are selected, they will be aligned horizontally and displayed in different colors. The attributes are extracted from the corpus description in the corpus registry (so possibly some are less useful then others).</span>
    Show</a>:
% $checked = 0;
% foreach my $att (@{$corpus->attributes}) {
  % my $ttip = $corpus->tooltip(attribute => $att, 'en');
  % if ($ttip) {
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em><%= $att %></em><%= $ttip %></span>
  % }
     <%= check_box_x 'show' => $att, $checked++ ? () : (checked => 'checked') => begin %><%= $att %><% end %>
  % if ($ttip) {
   </a>
  % }
% }
    <br>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Context tokens</em>Set the number or left and right tokens to be displayed in KWIC (keyword in contex) display mode. Note that punctuation characters are also tokens.</span>
    Context tokens</a>: <%= text_field 'contextsize', size=>2, value=>10 %>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Display mode</em>Selects the display mode used to display the results. <b>KWIC</b> (keyword in context) displays the results as a table, with the hit in the middle and the selected number of tokens on both sides. <b>Sentences</b> mode displays the whole sentence, as marked in the corpus, for each hit. <b>Wordlist</b> tabulates the hits and shows the number of occurencies for each hit - to be used with wildcards ('?' and '*') i.e. to find different word forms occurances.</span>
    Display mode</a>: <%= select_field 'display', [qw/kwic sentences wordlist/] %>
    <br>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Listing mode</em><b>Sample</b> displays a random sample of hits. Hit reload to see a different sample. <b>All</b> lists all the hits with result pages.</span>
    Listing mode</a>: <%= select_field 'listing', [qw/sample all/] %>
    <a class="tooltip" href="#"><span class="custom help"><img src="/icons/Help.png" alt="Help" height="48" width="48" /><em>Results</em>Sets the number or results in the random sample or per page when all the results are being listed.</span>
    Results</a>: <%= select_field 'size', [50, 100, 200, 500, 1000, 5000] %>
    <%= hidden_field startfrom => 1 %>
    <span class="submit"><%= submit_button 'CQP search' %></span>
  <% end %>
  </div>

@@ search.html.ep
% layout 'main', title=>'in ' . $corpus->name . ' for ' . $result->query ;
<%= include 'form' %>
  <div class="report">
% if ($self->param('display') eq 'wordlist') {
   <p>Retrieved <b><%=  scalar @{$result->hits} %></b> 
% if ($result->reduce) {
  out of <b><%= $result->distinct %></b>
% }
 distinct matches from <b><%= $result->hitno %></b> hits for <span class="querytext"><%= $result->query %></span>
% } elsif ($result->reduce) {
   <p>Sample of <b><%=  scalar @{$result->hits}  %></b> matches out of <b><%= $result->hitno %></b> retrieved for <span class="querytext"><%= $result->query %></span>
% }
% elsif ($result->hitno > ${$result->pages}{pagesize}) {
   <p>Matches <b><%= ${$result->pages}{this} ? ${$result->pages}{this} : 1 %></b> to <b><%= ${$result->pages}{this} +  @{$result->hits} - 1 %></b> out of <b><%= $result->hitno %></b> retrieved for <span class="querytext"><%= $result->query %></span>
% } else {
   <p><b><%= $result->hitno %></b> matches for <span class="querytext"><%= $result->query %></span>
% }
 in <%= sprintf('%0.3f', $result->time) %> s.</p>
  </div>

<%= include 'nav' %>

% if ($result->hitno) {
  <div class="matches">
% if ($self->param('display') eq 'kwic') {
  <table>
%  my $nr = ${$result->{pages}}{this};
%  foreach my $m (@{$result->hits}) {
    <tr>
     <td class="head"><span class="no">[<%= $nr++ %>]</sep> <span class="sd"><%= $m->{'cpos'} %></span><span class="structs">
%   foreach my $struct (keys %{$m->{data}}) {
    <span class="struct"><%= $m->{data}{$struct} %></span>
%   }
%#   warn "$m->{'left'}\n";
     </span></td>
     <td class="left"><%== $tc->($m->{left}); %></td>
     <td class="match"><span class="match"><%== $tc->($m->{match}); %></span></td>
     <td class="right"><%== $tc->($m->{right}); %></td>
    </tr>
%  }
  </table>
% } elsif ($self->param('display') eq 'sentences' or $self->param('display') eq 'paragraphs') {
%  my $nr = ${$result->{pages}}{this};
%  foreach my $m (@{$result->hits}) {
    <p>
     <span class="no">[<%= $nr++ %>]</span> <span class="sd"><%= $m->{'cpos'} %></span><span class="structs">
%   foreach my $struct (keys %{$m->{data}}) {
      <span class="struct"><%= $m->{data}{$struct} %></span>
%   }
     </span>
     <%== $tc->($m->{left}); %>
     <span class="match"><%== $tc->($m->{match}); %></span>
     <%== $tc->($m->{right}); %>
    </p>
%  }
% } elsif ($self->param('display') eq 'wordlist') {
  <table>
    <tr class="total"><td>TOTAL: <%= $result->distinct %></td><td class="count"><%= $result->hitno %></td></tr>
  %  foreach my $m (@{$result->hits}) {
    <tr><td><%= $m->[0] %></td><td class="count"><%= $m->[1] %></td></tr>
  %#  <tr><td><%= $self->dumper($m) %></td></tr>
  %  }
  </table>
% } else {
  Unknown display mode: query aborted. (Stop playing with my query parameters or I won't be RESTful much longer!)
% }
 </div>
<%= include 'nav' %>

%}

@@ nav.html.ep
% if ($result->hitno and not ${$result->pages}{single}) {
  <div class="nav">
    <%= link_to_here { startfrom => ${$result->pages}{prev} } => (class=>'prev') => begin %>Prev<% end %>
    <%= link_to_here { startfrom => ${$result->pages}{next} } => (class=>'next') => begin %>Next<% end %>
   <span class="pagelist">
     % foreach my $page (@{$result->pagelist(11)}) {
     %  if ($page eq '...') {
          . . .
     %    next;
     %  }
       <%= link_to_here { startfrom => $page } 
            => (class=> ( ${$result->pages}{this} == $page ? 'here' : 'pg') )
            => begin %><%= $page %><% end %>
     % }
   </span>
  </div>
% }

@@ layouts/main.html.ep
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>CQP Search <%= $title ? " $title" : '' =%></title>
  <link href="<%= '/' . $config->{root} . '/' . 'style.css' %>" rel="stylesheet" type="text/css">
 </head>
 <body>
  <h2><%= link_to 'index' => begin %>
    CQP Search
  <% end %>
 % if (param('corpus')) {
   on
   <%= link_to '/' . $config->{root} . '/' . param('corpus') => begin %>
     <%= ${$model->{corpora}}{param('corpus')}->title %>
   <% end %>
 %}
  </h2>
<%== content %> </body>
</html>

@@ style.css.ep
body { font-family: Palatino, Times, serif;
       font-size: 120%; 
       background-color: #F0F0F0;
}
span.querytext { font-family: monospace; font-size: 110%; font-weight: bold; }
div.nav   { font-weight: bold; font-size: 80%; }
div.nav > a.prev   { float: left; }
div.nav > a.next   { float: right; }
div.nav > a { padding: .5em; padding-left: 1.5em; padding-right: 1.5em;
              background-color: #3E3E3E; color: white;
}
span.pagelist {
  padding: .5em;
  text-align: center;
  vertical-align: center;
  background-color: #DEDEDE;
  display: block;
}
span.pagelist > a {
  margin-left:  .3em;
  margin-right: .3em;
}
span.pagelist > a.here {
 color: red;
}
div.matches   { clear: both; }
div.matches { background-color: white;
	      width: 98%;
              padding: 0px;
	      margin-left: auto; margin-right: auto;
}
div.matches table { padding: .5em; background-color: white; }
span.hit  { color: red; font-weight: bold; }
span.match  { color: red; font-weight: bold; }
span.no   { font-weight: bold; }
span.sd   { font-family: sans-serif; font-size: 60%; }
span.structs { display: inline-block }
span.struct   { display: block; font-family: sans-serif; font-size: 50%; }
td  { white-space: nowrap;}
td.head  { white-space: nowrap;}
td.left  { text-align: right; vertical-align: text-bottom;}
td.right { text-align: left;  vertical-align: text-top;}
td.match { text-align: center; padding-left: .5em; padding-right: .5em;
           color: red; font-weight: bold; vertical-align: middle;}
td.count  { text-align: right; padding-left: 1em;}
tr.total  { font-weight: bold;}
tr:nth-child(2n+1) { background-color: #F2F2F2; }
span.token { display: inline-block }
span.part { display: block; text-align: center; }
span.token span.part:nth-child(4n+1) { color: navy; }
span.token span.part:nth-child(4n+2) { color: green; }
span.token span.part:nth-child(4n+3) { color: maroon; }
span.token span.part:nth-child(4n+4) { color: purple; }
span.hlp span.hlptxt { display: none; }
span.hlp:hover span.helptxt { display: block; }
h2 { margin-left: 2em; margin-right: 2em; text-align: center ; }
h2 + p, div.report, div.corpora { margin-left: 4em; margin-right: 4em; }
div.form { margin-left: auto; margin-right: auto; width: 36em;
	   background-color: white;
	   padding: .4em; padding-bottom: .6em; padding-left: .6em;
	   border-left: solid 3px black;
	   border-top: solid 3px black;
	   border-bottom: solid 3px gray;
	   border-right: solid 3px gray;
}
span.submit { float: right; }
div.corpora > li {
  margin-bottom: .2ex;
  margin-top: .2ex;
}
div.description {
  margin: 3ex;
  font-size: 0.8em;
}

/* # tooltips from Alexander Dawson,
   # http://sixrevisions.com/css/css-only-tooltips/ */
a.tooltip {
    border-bottom: 1px dotted #000000; color: #000000; outline: none;
    cursor: help; text-decoration: none;
    position: relative;
}
a.tooltip span {
    display: none;
    position: absolute;
}
a.tooltip:hover span {
    display: block;
    border-radius: 5px 5px; -moz-border-radius: 5px; -webkit-border-radius: 5px;
    box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.1); -webkit-box-shadow: 5px 5px rgba(0, 0, 0, 0.1); -moz-box-shadow: 5px 5px rgba(0, 0, 0, 0.1);
    font-family: Calibri, Tahoma, Geneva, sans-serif; font-size: 0.7em;
    position: absolute; left: 1em; top: 2em; z-index: 99;
    margin-left: 0; width: 24em;
}
a.tooltip:hover img {
    border: 0; margin: -10px 0 0 -55px;
    float: left; position: absolute;
}
a.tooltip:hover em {
    font-family: Candara, Tahoma, Geneva, sans-serif; font-size: 1.2em; font-weight: bold;
    display: block; padding: 0.2em 0 0.6em 0;
}
.classic  { padding: 0.8em 1em; }
.custom   { padding: 0.5em 0.8em 0.8em 2em; }
* html a:hover { background: transparent; }
.classic  {background: #FFFFAA; border: 1px solid #FFAD33;  }
.critical { background: #FFCCAA; border: 1px solid #FF3334; }
.help     { background: #9FDAEE; border: 1px solid #2BB0D7; }
.info     { background: #9FDAEE; border: 1px solid #2BB0D7; }
.warning  { background: #FFFFAA; border: 1px solid #FFAD33; }
