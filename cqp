#!/usr/bin/env perl
use lib qw(/home/jona/Projects-ijs/CQP/lib);

# TODO:
# properly limit results, add context controls
# persistent options and checkboxes
# paragraph, wordlist views
# fix attribute printing as per http://nl2.ijs.si/fpj.html
# query compositing: http://nl2.ijs.si/fpj.html
# better fix for url->html encoding in queries
# show structural attributes
# promote errors to the renderer somehow

# Deployment:
# beta + utf test && deploy in parallel on mantra

#WISH LIST:
#rezultati: levo znamka o viru, na besedo klik v kontekst
#po vseh rezultatih, sortiranje po levem, desnem kontekstu, mogoče odzadnje po zadetku (odzadnji slovar princip)
#izpiše samo sample - default opcija, a velika (cut 1000)
#kolokacije
#v bodočnosti tudi vzporedni korpusi, npr. http://nl2.ijs.si/index-bi.html

use Mojolicious::Lite;
#use CWB::Web::Search;
use IO::File;
use CWB::Web::Query;
use CWB::CL;

app->secret('re9phoothieX4dah4chi');

my $config = plugin json_config => {
#       file      => '/etc/cqp.conf',
        stash_key => 'config',
        default   => { registry => '/usr/local/share/cwb/registry:/usr/local/cwb/registry' },
    };
$config->{root} =~ s{^(.*)/$}{$1};
app->log->info("App web root: '$config->{root}'.");
app->log->info("Corpus $config->{corpus}.");

$ENV{CORPUS_REGISTRY} = $CWB::CL::Registry =  $ENV{CORPUS_REGISTRY} ||= $config->{registry};
app->log->info("Registry at $CWB::CL::Registry.");

#get registry
my @reg = split (':', $CWB::CL::Registry);
my $file = lc($config->{corpus});
@reg = grep {  s{(.*)/$}{$1}; -e "$_/$file" } @reg;
my $reg = shift @reg;
die "No registry file for $config->{corpus} found in $CWB::CL::Registry.\n"
  unless $reg;
$reg = "$reg/$file";
app->log->info("Registry file at $reg.");

#get registry info
my @attribute; my @structure;
my $fh = new IO::File;
$fh->open($reg, '<') or die "Could not open $reg for reading.\n";
while (<$fh>) {
  m/^(?:NAME\s+     ([^#]*) (?{ my $x = $^N; chomp $x; $config->{corpus_name} = $x; }) )
    |(?:ATTRIBUTE\s+([^# ]*)(?{ my $x = $^N; chomp $x; push @attribute, $x; }) )
    |(?:STRUCTURE\s+([^# ]*)(?{ my $x = $^N; chomp $x; push @structure, $x; }) )
      /x;
}
$fh->close;

$config->{corpus_name} =~ s/^\"(.*)\"/$1/;
$config->{attributes} = \@attribute;
$config->{structures} = \@structure;

app->log->info("Registry file $reg/$file processed.");
app->log->info("Ready to serve requests.");

get "$config->{root}/" => 'index';

get "$config->{root}/style.css" => 'style';

get "$config->{root}/search" => sub {
  my $self = shift;
# warn $self->helper(dumper=> $self->stash); #calls Data::Dumper
# warn $self->helper(dumper=> $self->param);

  $self->app->log->info("Query was: " . $self->param('query'));

  $self->app->log->info("Redirecting.")
    and $self->redirect_to('index')
      and return
	unless $self->param('query');

  $self->app->log->info("CWB::Web::Query init on $config->{corpus}.")
  my $search = new CWB::Web::Query $config->{corpus}
  die "Error accessing corpus.\n" unless ref $search;

  # window and context size are specified in CQP syntax
#  $search->context("1 s", "1 s");  # match context returned as HTML
  $search->context("40", "40");  # match context returned as HTML
  $search->attributes(scalar $self->param('show') ?
		      $self->param('show') : 'word' );
#  $search->structures(@{$config->{structures}}) if $config->{structures};
  $search->reduce(50);              #ony return a sample of results
  $search->on_error( sub { warn join("\n", @_) . "\n"; } );

  # fix-up query string

  my $query = $self->param('query');
  if ( $query =~ m/"/ ) {
    $self->app->log->info("Passing as a CQP-formatted query.")
  } else  {
    $query =~ s/(?<!\\)[*]/.*/m; $query =~ s/(?<!\\)[?]/./m;
    $query = join(' ',
		   map {
		   '['
		     . (defined $self->param('search') ?
			$self->param('search') : 'word')
		       . '="' . $_ . '"]'
		     } split('\s+', $query)
		  );
    $self->app->log->info("Passing query as $query.");
  }

  my @matches;
  eval { @matches = $search->query($query); } ;
  $self->app->log->info("Query errors: $@") if $@;
  $self->app->log->info("Query processed.");

  $self->render( template=>'search',
		 search=>$search,  # stash them!
		 query=>$self->param('query'),
		 qquery=>$query,
		 matches=>\@matches,
	       );
};

app->start;

__DATA__

@@ index.html.ep
% layout 'main', title=>'Form';
<%= include 'form', query=>undef %>

@@ form.html.ep
  <form action="/search" method="GET">
    Show:
% my $checked = 0;
% foreach my $att (@{$config->{attributes}}) {
     <input type="checkbox" name="show" value="<%= $att %>"<%== $checked++ ? '' : ' checked="1"' %> ><%= $att %></input>
% }
    <br>
    Search:
% my $qs = Mojo::ByteStream->new($query);
% $checked = 0;
% foreach my $att (@{$config->{attributes}}) {
     <input type="radio" name="search" value="<%= $att %>"<%== $checked++ ? '' : ' checked="1"' %> ><%= $att %></input>
% }
    <br>
    Query: <input name="query" type="text" size="60" value='<%== $query ? $qs->encode('UTF-8')->to_string : ''%>'></input>
    <input type="submit" value="CQP search">
  </form>

@@ search.html.ep
% layout 'main', title=>"for $query" ;
<%= include 'form' %>
% my $qs = Mojo::ByteStream->new($query);
% my $qqs = Mojo::ByteStream->new($qquery);
% my $nr_matches = @{$matches};
  <div class="report">
   <p><b><%= $nr_matches %></b> matches found for <sep class="querytext"><%== $qs->encode('UTF-8') %></sep>.</p>
% unless ( $query eq $qquery ) {
   <p>Executed as <sep class="querytext"><%== $qqs->encode('UTF-8') %></sep>.</p>
% }
  </div>
% if ($nr_matches) {
  <div class="matches">
  <table>
%  for (my $i = 0; $i < $nr_matches; $i++) {
%   my $nr = $i + 1;         # match number
%   my $m = $matches->[$i];    # returns result struct without 'context'
    <tr>
     <td><sep class="no">[<%= $nr %>]</sep> <sep class="sd"><%= $m->{'cpos'} %></sep></td>
     <td class="left"><%== $m->{'kwic'}->{'left'}; %></td>
     <td class="match"><sep class="match"><%== $m->{'kwic'}->{'match'}; %></sep></td>
     <td class="right"><%== $m->{'kwic'}->{'right'}; %></td>
    </tr>
% }
  </table>
  </div>
%}


@@ layouts/main.html.ep
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head>
  <title>CQP Search <%= $title ? " $title" : '' =%></title>
  <link href="style.css" rel="stylesheet" type="text/css">
 </head>
 <body>
<h2>CQP Search on <%= $config->{corpus_name} %></h2>
<%== content %> </body>
</html>

@@ style.css.ep
body { font-family: Palatino, Times, serif; font-size: 120%;}
sep.querytext { font-family: monospace; font-size: 110%; font-weight: bold; }
sep.hit  { color: red; font-weight: bold; }
sep.no   { font-weight: bold; }
sep.sd   { font-family: sans-serif; font-size: 60%; }
td.left  { text-align: right; vertical-align: text-bottom;}
td.right { text-align: left;  vertical-align: text-top;}
td.match { text-align: center; padding-left: .5em; padding-right: .5em;
           color: red; font-weight: bold; vertical-align: middle;}
